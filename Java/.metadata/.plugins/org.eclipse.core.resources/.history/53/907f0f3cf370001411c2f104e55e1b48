import static org.lwjgl.opengl.GL11.*;
import static org.lwjgl.opengl.GL20.*;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;

public class OpenGLProgram implements Program 
{
	private int programId;
	private ArrayList<Shader> ownedShaders;
	
	public OpenGLProgram()
	{
		programId = glCreateProgram();
		ownedShaders = new ArrayList<Shader>();
	}
	
	public OpenGLProgram(File vertexShader, File fragmentShader) throws FileNotFoundException
	{
		Shader vertexShaderObj = new OpenGLShader(GL_VERTEX_SHADER, vertexShader);
		Shader fragmentShaderObj = new OpenGLShader(GL_FRAGMENT_SHADER, fragmentShader);
		vertexShaderObj.compile();
		fragmentShaderObj.compile();
		this.attachShader(vertexShaderObj, true);
		this.attachShader(fragmentShaderObj, true);
		this.link();
	}
	
	public void attachShader(Shader shader, boolean owned)
	{
		if (!shader.isCompiled())
		{
			throw new UncompiledShaderException("Shaders must be compiled before they can be attached to a program.");
		}
		else
		{
			glAttachShader(programId, shader.getId());
			if (owned)
			{
				ownedShaders.add(shader);
			}
		}
	}
	
	public void detachShader(Shader shader)
	{
		glDetachShader(programId, shader.getId());
	}
	
	public boolean isLinked()
	{
		int linked = glGetProgrami(programId, GL_LINK_STATUS);
    	return linked == GL_TRUE;
	}
	
	public void link()
	{
    	glLinkProgram(programId);
    	if (!this.isLinked())
    	{
    		throw new ProgramLinkFailureException(glGetProgramInfoLog(programId));
    	}
	}
	
	public void use()
	{
		if (!this.isLinked())
		{
			throw new UnlinkedProgramException("An OpenGL program cannot be used if it has not been linked.");
		}
		else
		{
			glUseProgram(programId);
		}
	}
	
	public void delete()
	{
		glDeleteProgram(programId);
		for (Shader shader : ownedShaders)
		{
			shader.delete();
		}
	}
	
	public int getUniformLocation(String name)
	{
		return glGetUniformLocation(programId, name);
	}
	
	public void setUniform(String name, int value)
	{
		
		glUniform1i
	}
}
